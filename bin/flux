#!/bin/bash

# Usage
# =====
#
# flux build 
# flux start - determine cloud vendor / OS and start 
# flux stop - stops
# flux purge - delete everything
# flux pull - pulls latest version
# flux notebook - open browser on notebook start page
# flux ps - list all processes
# flux stats - print resource utilization
#
# Later:
# flux scale / add-host / add-node
# flux update

function require {
  which $1 &>/dev/null || { echo "$1 is not installed, but required!"; exit 1; }
}

function displayUsage {
  grep '^#' $0 | grep -v '#!' | sed 's/^# *//'
}

function checkForGPU {
  true # TODO [ -n `docker volume ls -q -f driver=nvidia-docker` ]
}

hasGPU=$(checkForGPU)

set -eo pipefail

require 'docker'
require 'kubectl'
require 'helm'


command=$1

case "$command" in
  "build")
    GPU=${hasGPU} || echo '-_gpu'

    echo "suffix: ${GPU}"

    ./deploy/docker/docker_build_ros${GPU}.sh
    ./deploy/docker/docker_build${GPU}.sh
    docker build -t fluxproject/examples${GPU} .
    ;;
  "start")
    kubectl create -f deploy/kubernetes/flux-ros-hadoop-deployment.yml
    kubectl create -f deploy/kubernetes/flux-ros-hadoop-service.yml
    ;;
    # TODO: poll and block until it is really started?
  "purge")
    kubectl delete -f deploy/kubernetes/flux-ros-hadoop-service.yml
    kubectl delete -f deploy/kubernetes/flux-ros-hadoop-deployment.yml
    ;;
  "stop")
    # TODO: wait for helm install helm delete --purge hdfs
    ;;
  "ps")
    kubectl get all --all-namespaces
    ;;
  "stats")
    echo "TODO: implement me"
    exit 1
    ;;
  "notebook")
    #PORT=
    open "http://localhost:$(kubectl get service flux-ros-hadoop --template='{{(index .spec.ports 0).nodePort}}')"
    ;;
  "pull")
    docker pull fluxproject/flux:latest
    docker pull fluxproject/examples:latest
    ;;

  # TODO: need flux init?
  # TODO: need flux check to check if everything is running
  *)
    displayUsage
    exit 1
    ;;
esac
